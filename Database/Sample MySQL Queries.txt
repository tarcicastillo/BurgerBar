//GETTING THE COST OF THINGS

//Get cost of individual burger types per user’s order (cumulative sum)
SELECT burgerID as "Burger", (quantity*cost) as "Price for Burgers"
FROM orderform natural join orderdetail
WHERE userID = 666;

//Get cost of individual burger types for an entire order 
SELECT burgerID as "Burger", cost as "Price for Burgers"
FROM orderform natural join orderdetail
WHERE userID = 666;


//Set the cost of an entire order based on Order Details
UPDATE OrderForm SET price = (
SELECT sum(quantity*cost)
FROM orderdetail
WHERE orderID = 1)
WHERE orderID = 1;

//Returns cost of individual meat  for an individual burger
SELECT Meats.price
FROM orderForm natural join orderDetail natural join Burger inner join Meats
WHERE Meats.name = Burger.Meat AND
USERID = 666;

//Returns cost of individual bun  for an individual burger
SELECT Buns.price
FROM orderForm natural join orderDetail natural join Burger inner join Buns
WHERE Buns.name = Burger.Bun AND
USERID = 666;

//Returns cost of individual cheese  for an individual burger
SELECT Cheeses.price
FROM orderForm natural join orderDetail natural join Burger inner join Cheeses
WHERE Cheeses.name = Burger.cheese AND
USERID = 666;

//Returns the cost of all the toppings for an individual burger
SELECT sum(Toppings.price) as "Price"
FROM orderForm natural join orderDetail natural join Burger natural join ToppingDetails inner join Toppings
WHERE ToppingDetails.BurgerID = Burger.BurgerID AND
	ToppingDetails.ToppingName = Toppings.name;


//Price of a single burger according to BurgerID
SET @burgerIDNum = 1;

SET @meatPrice = (SELECT Meats.price
FROM orderForm natural join orderDetail natural join Burger inner join Meats
WHERE Meats.name = Burger.Meat AND
burger.burgerID = @burgerIDNum);

SET @bunsPrice = (SELECT Buns.price
FROM orderForm natural join orderDetail natural join Burger inner join Buns
WHERE Buns.name = Burger.Bun AND
burger.burgerID = @burgerIDNum);

SET @cheesePrice = (SELECT Cheeses.price
FROM orderForm natural join orderDetail natural join Burger inner join Cheeses
WHERE Cheeses.name = Burger.cheese AND
burger.burgerID = @burgerIDNum);

SET @toppingPrice = (SELECT sum(Toppings.price)
FROM orderForm natural join orderDetail natural join Burger natural join ToppingDetails inner join Toppings
WHERE ToppingDetails.BurgerID = Burger.BurgerID AND
burger.burgerID = @burgerIDNum AND
	ToppingDetails.ToppingName = Toppings.name);
	
SET @priceOfBurger = @meatPrice + @bunsPrice + @cheesePrice + @toppingPrice;

SELECT @priceOfBurger as "Price of Burger";


//VIEWING THINGS - Returns Name and Price
SELECT *
FROM Bun;

SELECT *
FROM Cheese;

SELECT *
FROM Meat;

SELECT *
FROM Sauces;

SELECT *
FROM Side;

SELECT *
FROM Topping;


//To Be Done

//Registration & login
Login - Need to check if something exists
Registration - (adding/updating into the database for unregistered AND registered user)

//Payment Info - 
If it’s a registered user, pre-fill out the form (return this info)

//Pricing of total price

//Deleting stuff, editing stuff, that stuff

//Creating a Burger
INSERT INTO BURGER (12, 12, "", "", "", "", 0, 0);

//Adding the meat to a particular burger (or edit)
UPDATE Burger SET Meat = (
SELECT name
FROM meat
WHERE name = @selectedMeat)
WHERE BurgerID = @BurgerID;

//Adding the Cheese to a  particular burger
UPDATE Burger SET Cheese = (
SELECT name
FROM Cheese
WHERE name = @selectedCheese)
WHERE BurgerID = @BurgerID;

//Adding the Side to a particular burger
UPDATE Burger SET Side = (
SELECT name
FROM Side
WHERE name = @selectedSide)
WHERE BurgerID = @BurgerID;

//Adding the bun for a particular burger
UPDATE Burger SET Bun = (
SELECT name
FROM Bun
WHERE name = @selectedBun)
WHERE BurgerID = @BurgerID;


//Adding a toppingDetail
INSERT INTO toppingDetail VALUES 
	(@burgerID, @selectedTopping);

//Adding a sauceDetali
INSERT INTO sauceDetail VALUES 
	(@burgerID, @selectedSauce);

